cmake_minimum_required(VERSION 2.8.0)

#dngv-libraries
set(HOME $ENV{HOME})
set(DNGV_LIBDIR "${HOME}/dngv/lib")
set(LIB_PATH ${DNGV_LIBDIR})

set(LDFLAGS_COMMON   ${LIB_PATH}/libcommon.a)
set(LDFLAGS_LCMTYPES   ${LIB_PATH}/liblcmtypes.a)
set(LDFLAGS_COMMON_LCM   ${LIB_PATH}/libcommon_lcm.a)
set(LDFLAGS_LSHM   ${LIB_PATH}/liblshm.a)
set(LDFLAGS_LEARNING   ${LIB_PATH}/liblearning.a)
set(LDFLAGS_CAMERA   ${LIB_PATH}/libcamera.a)
set(LDFLAGS_GEOMETRY   ${LIB_PATH}/libgeom.a)
set(LDFLAGS_GEOM_UTIL   ${LIB_PATH}/libgeom_util.a)
set(LDFLAGS_G4_NETWORK   ${LIB_PATH}/libg4_network.a)
set(LDFLAGS_GSL_UTIL   ${LIB_PATH}/libgsl_util.a)
set(LDFLAGS_VX   ${LIB_PATH}/libvx.a)
set(LDFLAGS_VX_GL   ${LIB_PATH}/libvxgl.a)
set(LDFLAGS_VX_GTK   ${LIB_PATH}/libvxgtk.a)
set(LDFLAGS_IMAGE_UTIL   ${LIB_PATH}/libimage_util.a)
set(LDFLAGS_OBJECTS   ${LIB_PATH}/libobjects.a)
set(LDFLAGS_IMAGE_FEATURES   ${LIB_PATH}/libimage_features.a)
set(LDFLAGS_VX_UTIL   ${LIB_PATH}/libvx_util.a)
set(LDFLAGS_GIGE      ${LIB_PATH}/libgige.a)
set(LDFLAGS_RNDF   ${LIB_PATH}/librndf.a)
set(LDFLAGS_PRIOR_MAP   ${LIB_PATH}/libprior_map.a)
set(LDFLAGS_MISSION_PLANNING   ${LIB_PATH}/libmissionplanning.a)
set(LDFLAGS_CONTROL   ${LIB_PATH}/libcontrol.a)
set(LDFLAGS_MOTION_PLANNING   ${LIB_PATH}/libmotionplanning.a)
set(LDFLAGS_MULTIPOLICY   ${LIB_PATH}/libmultipolicy.a)
set(LDFLAGS_VIRTUAL_TRAFFIC   ${LIB_PATH}/libvirtual_traffic.a)
set(LDFLAGS_SIMULATOR   ${LIB_PATH}/libsimulator.a)
set(LDFLAGS_EST   ${LIB_PATH}/libest.a)
set(LDFLAGS_PCAN   ${LIB_PATH}/libpcan.a)
set(LDFLAGS_GPS   ${LIB_PATH}/libgps.a)
set(LDFLAGS_APPLANIX   ${LIB_PATH}/libapplanix.a)
set(LDFLAGS_MAPPING   ${LIB_PATH}/libmapping.a)
set(LDFLAGS_VELODYNE   ${LIB_PATH}/libvelodyne.a)
set(LDFLAGS_LOCALIZATION   ${LIB_PATH}/liblocalization.a)
set(LDFLAGS_OBSTACLE   ${LIB_PATH}/libobstacle.a)
set(LDFLAGS_POSITION   ${LIB_PATH}/libposition.a)
set(LDFLAGS_SYSSTAT   ${LIB_PATH}/libsysstat.a)
set(LDFLAGS_CRYPTO   ${LIB_PATH}/libcrypto.a)
set(LDFLAGS_AVP   ${LIB_PATH}/libavp.a)


list(APPEND DNGV_LIBRARIES
    ${LDFLAGS_SIMULATOR}    ${LDFLAGS_VIRTUAL_TRAFFIC}
    ${LDFLAGS_MULTIPOLICY}    ${LDFLAGS_MOTION_PLANNING}
    ${LDFLAGS_CONTROL}    ${LDFLAGS_MISSION_PLANNING}
    ${LDFLAGS_RNDF}    ${LDFLAGS_G4_NETWORK}
    ${LDFLAGS_VX_UTIL}    ${LDFLAGS_PRIOR_MAP}
    ${LDFLAGS_GIGE}    ${LDFLAGS_PCAN}
    ${LDFLAGS_EST}    ${LDFLAGS_APPLANIX}
    ${LDFLAGS_VELODYNE} ${LDFLAGS_MAPPING}
    ${LDFLAGS_SYSSTAT} ${LDFLAGS_LOCALIZATION}
    ${LDFLAGS_OBSTACLE} ${LDFLAGS_AVP}
    ${LDFLAGS_POSITION} ${LDFLAGS_GPS}
    ${LDFLAGS_IMAGE_FEATURES} ${LDFLAGS_CAMERA}
    ${LDFLAGS_OBJECTS} ${LDFLAGS_IMAGE_UTIL}
    ${LDFLAGS_VX_GTK} ${LDFLAGS_VX_GL}
    ${LDFLAGS_VX} ${LDFLAGS_CRYPTO}
    ${LDFLAGS_GSL_UTIL} ${LDFLAGS_GEOM_UTIL}
    ${LDFLAGS_GEOMETRY} ${LDFLAGS_LEARNING}
    ${LDFLAGS_LSHM} ${LDFLAGS_COMMON_LCM}
    ${LDFLAGS_LCMTYPES} ${LDFLAGS_COMMON}
    )


include_directories("~/dngv/src" "~/dngv/src/libraries")
list(APPEND LD_FLAGS ${DNGV_LIBRARIES})

#pkg-config
find_package(PkgConfig REQUIRED)

#LCM
pkg_check_modules(LCM lcm)
include_directories(${LCM_INCLUDEDIR})
link_directories(${LCM_LIBDIR}) 
list(APPEND LD_FLAGS ${LCM_LIBRARIES})

#GSL 
pkg_check_modules(GSL gsl)
include_directories(${GSL_INCLUDEDIR})
list(APPEND LD_FLAGS ${GSL_LIBRARIES})
link_directories(${GSL_LIBDIR})

#GTK2
find_package(GTK2 REQUIRED)
include_directories(${GTK2_INCLUDE_DIRS})
link_directories(${GTK2_LIBDIRS}) 
list(APPEND LD_FLAGS ${GTK2_LIBRARIES}) 

#GLIB-2.0
pkg_check_modules(GLIB glib-2.0)
include_directories(${GLIB_INCLUDEDIR})
link_directories(${GLIB_LIBDIR})
#list(APPEND LD_FLAGS ${GLIB_LIBRARIES})

#libpng
find_library(LIB_PNG png)
list(APPEND LD_FLAGS ${LIB_PNG})

#libjpeg
find_library(LIB_JPEG jpeg)
list(APPEND LD_FLAGS ${LIB_JPEG})

#required system dependencies
list(APPEND LD_FLAGS m rt z GL X11 pthread dl crypto)

#3rd-party-dependencies
set(other_LIBRARIES)

#CUDA
find_package(CUDA REQUIRED)
include_directories(${CUDA_INCLUDE_DIRS})
list(APPEND CUDA_LIBS ${CUDA_LIBRARIES} ${CUDA_CUBLAS_LIBRARIES} ${CUDA_cusolver_LIBRARY} ${CUDA_cusparse_LIBRARY})
list(APPEND other_LIBRARIES ${CUDA_LIBS})

#FLANN
pkg_check_modules(FLANN flann)
include_directories(${FLANN_INCLUDEDIR})
link_directories(${FLANN_LIBDIR})
list(APPEND other_LIBRARIES "${FLANN_LIBRARIES}")
list(APPEND other_LIBRARIES "${FLANN_LIBDIR}/libflann_cuda.so")

#QHULL
set(LIB_QHULL "/usr/lib/x86_64-linux-gnu/libqhull.so")
list(APPEND other_LIBRARIES ${LIB_QHULL})
add_definitions(-Dqh_QHpointer)

#OpenCV
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
list(APPEND other_LIBRARIES ${OpenCV_LIBRARIES})

#EIGEN
pkg_check_modules(EIGEN eigen3)
include_directories(${EIGEN_INCLUDE_DIRS})


#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -g -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_REENTRANT -Wall -Wshadow -Wno-unused-parameter -Wno-format-zero-length -pthread -fPIC -Werror -O2 -MMD -MP")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++98 -g -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_REENTRANT -Wall -Wshadow -Wno-unused-parameter -pthread -Werror -O2 -MMD")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unknown-pragmas -fno-strict-aliasing -Wno-format-extra-args -Wno-sign-compare -Wno-invalid-offsetof -Wno-conversion  -march=native -msse4.2 -mfpmath=sse -Wabi -pthread -fopenmp -O2 -g -DNDEBUG   -DBOOST_DISABLE_ASSERTS -DEIGEN_NO_DEBUG")


set(CURR_DIR ${CMAKE_CURRENT_SOURCE_DIR})

file(GLOB all_files RELATIVE ${CURR_DIR} ${CURR_DIR}/*)
set(SUB_DIRS "")

foreach(file ${all_files})
    if(IS_DIRECTORY ${CURR_DIR}/${file})
        list(APPEND SUB_DIRS ${file})
    endif()
endforeach()

set(CURR_BINARY_DIR "${CURR_DIR}/../bin")
file(MAKE_DIRECTORY ${CURR_BINARY_DIR})

set(all_TARGETS)

foreach(dir ${SUB_DIRS})
    set(CURRENT_TARGET "${dir}")
    add_subdirectory(${CURR_DIR}/${dir})
endforeach()


